@{
	ViewData["Title"] = "Edit User";
}

<style>
	body {
		background-color: #eaf0f6;
		font-family: 'Segoe UI', sans-serif;
	}

	.profile-container {
		display: flex;
		flex-wrap: wrap;
		gap: 2rem;
		justify-content: center;
		padding: 3rem 1rem;
	}

	.profile-card {
		background: #fff;
		border-radius: 12px;
		box-shadow: 0 4px 12px rgba(0,0,0,0.08);
		width: 280px;
		height: 370px;
		text-align: center;
		padding: 2rem 1rem;
		position: sticky;
		top: 0;
	}

		.profile-card img {
			width: 100px;
			height: 100px;
			border-radius: 50%;
			object-fit: cover;
			margin-bottom: 1rem;
		}

		.profile-card h5 {
			margin: 0;
			font-weight: bold;
		}

		.profile-card small {
			color: #777;
		}

	.upload-btn {
		background-color: #ef4444;
		color: #fff;
		border: none;
		padding: 0.6rem 1rem;
		border-radius: 6px;
		margin-top: 1rem;
		width: 100%;
	}

	.profile-card .info-text {
		font-size: 0.8rem;
		color: #666;
		margin-top: 1rem;
	}

	.edit-form-card {
		background: #fff;
		border-radius: 12px;
		box-shadow: 0 4px 12px rgba(0,0,0,0.08);
		padding: 2rem;
		flex: 1 1 500px;
		max-width: 750px;
	}

		.edit-form-card h4 {
			font-weight: 700;
			margin-bottom: 1.5rem;
		}

	.form-label {
		font-weight: 600;
		margin-bottom: 0.3rem;
	}

	.form-control {
		border-radius: 8px;
	}

	.tab-buttons {
		border-bottom: 1px solid #dee2e6;
		margin-bottom: 1.5rem;
	}

		.tab-buttons button {
			border: none;
			background: none;
			font-weight: 600;
			padding: 0.5rem 1rem;
			border-bottom: 3px solid transparent;
			color: #333;
		}

			.tab-buttons button.active {
				border-bottom-color: #0d6efd;
				color: #0d6efd;
			}

	.update-btn {
		background-color: #ef4444;
		color: white;
		border: none;
		padding: 0.6rem 2rem;
		font-weight: 600;
		border-radius: 6px;
		margin-top: 1rem;
	}

	@@media(max - width: 768px) {
		.profile-card, .edit-form-card {
			width: 100%;
		}
	}

	.image_logo img {
		width: 65px;
		height: 65px;
	}
</style>

<div class="profile-container">	
	<div class="edit-form-card">
		<div class="mb-4">
			<h3 class="mb-0">Edit User Details - <span id="headerMobileNumber"></span></h3>
		</div>
		<form id="editUserForm">
			<div class="row g-3">

				<div class="col-md-12">
					<label for="userID" class="form-label">User ID</label>
					<input type="text" id="userID" class="form-control" readonly>
				</div>

				<div class="col-md-6">
					<label for="mobileNumber" class="form-label">Mobile Number</label>
					<input type="text" id="mobileNumber" class="form-control" readonly>
				</div>
				<div class="col-md-6">
					<label for="appCode" class="form-label">App Code</label>
					<input type="text" id="appCode" class="form-control" readonly>
				</div>

				<div class="col-md-6">
					<label for="subscriptionExpiryDate" class="form-label">Subscription Expiry Date</label>
					<input type="date" id="subscriptionExpiryDate" class="form-control">
				</div>
				<div class="col-md-6">
					<label for="extendDaysInput" class="form-label">Extend by (days)</label>
					<input type="number" id="extendDaysInput" placeholder="Enter days to add" class="form-control" min="0">
				</div>
			</div>

			<div class="btn_allsave_list mt-4">
				<button type="submit" class="btn btn-primary" id="saveBtn">Save Changes</button>
				<button type="button" id="deleteUserButton" class="btn-danger">Delete</button>
				<a href="@Url.Action("Userprofile", "Home")" class="btn-secondary">Back</a>
			</div>

			<!-- Generic Message Modal -->
			<div class="modal fade" id="messageModal" tabindex="-1" aria-labelledby="messageModalLabel" aria-hidden="true">
				<div class="modal-dialog modal-dialog-centered">
					<div class="modal-content">
						<div class="modal-header" id="messageModalHeader">
							<h5 class="modal-title" id="messageModalLabel">Message</h5>
							<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
						</div>
						<div class="modal-body text-center text-black fw-semibold" id="messageModalBody">
							<!-- Message will be inserted here by JavaScript -->
						</div>
						<div class="modal-footer">
							<button type="button" class="btn-secondary" data-bs-dismiss="modal">Close</button>
						</div>
					</div>
				</div>
			</div>

			<!-- DELETE CONFIRMATION MODAL -->
			<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
				<div class="modal-dialog modal-dialog-centered">
					<div class="modal-content">
						<div class="modal-header bg-danger text-white">
							<h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Deletion</h5>
							<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
						</div>
						<div class="modal-body">
							Are you sure you want to delete this user? This action cannot be undone.
						</div>
						<div class="modal-footer">
							<button type="button" class="btn-secondary" data-bs-dismiss="modal">Cancel</button>
							<button type="button" id="confirmDeleteBtn" class="btn-danger">Yes, Delete User</button>
						</div>
					</div>
				</div>
			</div>
		</form>
	</div>
</div>

@section Scripts {
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			const token = '@User.FindFirst("ApiToken")?.Value';
			const baseApiUrl = '@ViewBag.ApiUrl';
			const userDataString = sessionStorage.getItem('userToEdit');
			let originalUserData = null;
			let originalExpiryDateString = '';

			// Form elements
			const subscriptionDateInput = document.getElementById('subscriptionExpiryDate');
			const extendDaysInput = document.getElementById('extendDaysInput');
			const deleteButton = document.getElementById('deleteUserButton');

			// Modals
			const messageModalElement = document.getElementById('messageModal');
			const messageModal = new bootstrap.Modal(messageModalElement);
			const deleteConfirmModalElement = document.getElementById('deleteConfirmModal');
			const deleteConfirmModal = new bootstrap.Modal(deleteConfirmModalElement);

			const modalHeader = document.getElementById('messageModalHeader');
			const modalTitle = document.getElementById('messageModalLabel');
			const modalBody = document.getElementById('messageModalBody');
			const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
			let redirectOnClose = false;

			function showMessageModal(title, message, isError = false) {
				modalTitle.textContent = title;
				modalBody.textContent = message;

				modalHeader.classList.remove('bg-success', 'bg-danger', 'text-white');
				if (isError) {
					modalHeader.classList.add('bg-danger', 'text-white');
					redirectOnClose = false;
				} else {
					modalHeader.classList.add('bg-success', 'text-white');
					redirectOnClose = true;
				}
				messageModal.show();
			}

			messageModalElement.addEventListener('hidden.bs.modal', function () {
				if (redirectOnClose) {
					window.location.href = '@Url.Action("Userprofile", "Home")';
				}
			});

			// =======================================================================
			// =======================================================================
					// ADD THIS NEW, CORRECT FUNCTION
		function parseAndFormatDate(dateStringDDMMYYYY) {
				if (!dateStringDDMMYYYY) {
						return ''; // Return empty if there's no date
				}

				// Split the date string by either '/' or '-'
				const parts = dateStringDDMMYYYY.split(/[-/]/);

				// Check if we got 3 parts (day, month, year)
				if (parts.length === 3) {
						const [day, month, year] = parts;
						// Re-assemble the parts in the required "yyyy-MM-dd" format
						// padStart ensures month and day are two digits (e.g., '07' instead of '7')
						return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
				}

				// If the format is unexpected, return empty to avoid errors
				console.warn('Could not parse date:', dateStringDDMMYYYY);
				return '';
		}


			if (userDataString) {
				originalUserData = JSON.parse(userDataString);
				document.getElementById('headerMobileNumber').textContent = originalUserData.mobileNumber || 'N/A';
			} else {
				showMessageModal('Error', 'No user data found. Redirecting to dashboard.', true);
				redirectOnClose = true;
				return;
			}

			// --- POPULATE ALL FORM FIELDS ---
			debugger
			document.getElementById('userID').value = originalUserData.userID || '';
			document.getElementById('mobileNumber').value = originalUserData.mobileNumber || '';
			document.getElementById('appCode').value = originalUserData.appCode || '';

			originalExpiryDateString = parseAndFormatDate(originalUserData.subscriptionExpiryDate);
			subscriptionDateInput.value = originalExpiryDateString;


			// --- EVENT LISTENER FOR EXTENDING DAYS ---
			extendDaysInput.addEventListener('input', function() {
				debugger
				const daysToAdd = parseInt(this.value, 10);

				if (isNaN(daysToAdd) || daysToAdd <= 0) {
					subscriptionDateInput.value = originalExpiryDateString;
					return;
				}
				debugger
				const baseDateString = originalExpiryDateString || new Date().toISOString().slice(0, 10);
				let baseDate = new Date(baseDateString);

				baseDate.setDate(baseDate.getDate() + daysToAdd);

				subscriptionDateInput.value = baseDate.toISOString().slice(0, 10);
			});

			// --- FORM SUBMISSION (UPDATE) LOGIC ---
			document.getElementById('editUserForm').addEventListener('submit', async function (event) {
				event.preventDefault();
				const saveButton = document.getElementById('saveBtn');
				saveButton.disabled = true;
				saveButton.textContent = 'Saving...';
				debugger
				const newExpiryDate = subscriptionDateInput.value;

				if (!newExpiryDate) {
					showMessageModal('Validation Error', 'Subscription Expiry Date cannot be empty.', true);
					saveButton.disabled = false;
					saveButton.textContent = 'Save Changes';
					return;
				}

				const updatedData = {
					userID: parseInt(document.getElementById('userID').value, 10),
					mobileNumber: originalUserData.mobileNumber,
					appCode: document.getElementById('appCode').value,
					subscriptionExpiryDate: newExpiryDate,
				};

				try {
					const response = await fetch(`${baseApiUrl}/api/Admin/UpdateUser/`, {
						method: 'POST',
						headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
						body: JSON.stringify(updatedData)
					});

					if (!response.ok) {
						const errorText = await response.text();
						throw new Error(`API Error (${response.status}): ${errorText || 'Failed to update.'}`);
					}

					showMessageModal('Success', 'User details updated successfully!');

				} catch (error) {
					console.error('Failed to update user:', error);
					showMessageModal('Update Failed', `An error occurred while saving: ${error.message}`, true);
				} finally {
					saveButton.disabled = false;
					saveButton.textContent = 'Save Changes';
				}
			});

			// --- DELETE LOGIC ---
			deleteButton.addEventListener('click', function () {
				deleteConfirmModal.show();
			});

			confirmDeleteBtn.addEventListener('click', async function () {
				deleteConfirmModal.hide();
				const userId = originalUserData.userID;
				const appcode = originalUserData.appCode;

				if (!userId) {
					showMessageModal('Error', 'Cannot delete user: User ID is missing.', true);
					return;
				}

				const deleteBtnRef = document.getElementById('deleteUserButton');
				deleteBtnRef.disabled = true;
				deleteBtnRef.textContent = 'Deleting...';

				try {
					const response = await fetch(`${baseApiUrl}/api/Admin/DeleteUsersRegisteredRecord?UserID=${userId}&Appcode=${appcode}`, {
						method: 'DELETE',
						headers: { 'Authorization': `Bearer ${token}` }
					});

					if (!response.ok) {
						const errorText = await response.text();
						throw new Error(`API Error (${response.status}): ${errorText || 'Failed to delete user.'}`);
					}
					showMessageModal('Success', 'User deleted successfully!');
				} catch (error) {
					console.error('Failed to delete user:', error);
					showMessageModal('Delete Failed', `An error occurred while deleting: ${error.message}`, true);
				} finally {
					deleteBtnRef.disabled = false;
					deleteBtnRef.textContent = 'Delete';
				}
			});
		});
	</script>
}