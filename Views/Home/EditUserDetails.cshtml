@{
	ViewData["Title"] = "Edit User";
}

<style>
	body {
		background-color: #eaf0f6;
		font-family: 'Segoe UI', sans-serif;
	}

	.profile-container {
		display: flex;
		flex-wrap: wrap;
		gap: 2rem;
		justify-content: center;
		padding: 3rem 1rem;
	}

	.profile-card {
		background: #fff;
		border-radius: 12px;
		box-shadow: 0 4px 12px rgba(0,0,0,0.08);
		width: 280px;
		height: 370px;
		text-align: center;
		padding: 2rem 1rem;
		position: sticky;
		top: 0;
	}

		.profile-card img {
			width: 100px;
			height: 100px;
			border-radius: 50%;
			object-fit: cover;
			margin-bottom: 1rem;
		}

		.profile-card h5 {
			margin: 0;
			font-weight: bold;
		}

		.profile-card small {
			color: #777;
		}

	.upload-btn {
		background-color: #ef4444;
		color: #fff;
		border: none;
		padding: 0.6rem 1rem;
		border-radius: 6px;
		margin-top: 1rem;
		width: 100%;
	}

	.profile-card .info-text {
		font-size: 0.8rem;
		color: #666;
		margin-top: 1rem;
	}

	.edit-form-card {
		background: #fff;
		border-radius: 12px;
		box-shadow: 0 4px 12px rgba(0,0,0,0.08);
		padding: 2rem;
		flex: 1 1 500px;
		max-width: 750px;
	}

		.edit-form-card h4 {
			font-weight: 700;
			margin-bottom: 1.5rem;
		}

	.form-label {
		font-weight: 600;
		margin-bottom: 0.3rem;
	}

	.form-control {
		border-radius: 8px;
	}

	.tab-buttons {
		border-bottom: 1px solid #dee2e6;
		margin-bottom: 1.5rem;
	}

		.tab-buttons button {
			border: none;
			background: none;
			font-weight: 600;
			padding: 0.5rem 1rem;
			border-bottom: 3px solid transparent;
			color: #333;
		}

			.tab-buttons button.active {
				border-bottom-color: #0d6efd;
				color: #0d6efd;
			}

	.update-btn {
		background-color: #ef4444;
		color: white;
		border: none;
		padding: 0.6rem 2rem;
		font-weight: 600;
		border-radius: 6px;
		margin-top: 1rem;
	}

	@@media(max - width: 768px) {
		.profile-card, .edit-form-card {
			width: 100%;
		}
	}

	.image_logo img {
		width: 65px;
		height: 65px;
	}
</style>

<div class="profile-container">
	<div class="profile-card" style="display: none;">
		<div class="image_logo">
			<img src="~/image/images1.png" />
		</div>
		<h5>Jamed Allan</h5>
		<small>james</small>
		<button class="upload-btn mt-3">Upload New Photo</button>
		<p class="info-text">
			Upload a new avatar. Larger image will be resized automatically.<br>
			Maximum upload size is 1 MB.
		</p>
		<p class="info-text">Member Since: <strong>29 September 2019</strong></p>
	</div>
	<div class="edit-form-card">
		<div class="mb-4">
			<h3 class="mb-0">Edit User Details - <span id="headerMobileNumber"></span></h3>
		</div>
		<form id="editUserForm">
			<div class="row g-3">

				<div class="col-md-12">
					<label for="userID" class="form-label">User ID</label>
					<input type="text" id="userID" class="form-control no-click" readonly
								 tabindex="-1" onfocus="this.blur();">
				</div>

				<div class="col-md-6">
					<label for="mobileNumber" class="form-label">Mobile Number</label>
					<input type="text" id="mobileNumber" class="form-control" readonly>
				</div>

				<div class="col-md-6">
					<label for="createdDate" class="form-label">Created Date</label>
					<input type="text" id="createdDate" class="form-control" readonly>
				</div>

				<div class="col-md-6">
					<label for="emailID" class="form-label">Email ID</label>
					<input type="text" id="emailID" class="form-control">
				</div>

				<div class="col-md-6">
					<label for="subscriptionExpiryDate" class="form-label">Subscription Expiry Date</label>
					<input type="date" id="subscriptionExpiryDate" class="form-control">
				</div>

				<div class="col-md-6">
					<label for="deviceID" class="form-label">Device ID</label>
					<input type="text" id="deviceID" class="form-control" readonly>
				</div>

				<div class="col-md-6">
					<label for="platform" class="form-label">Platform</label>
					<input type="text" id="platform" class="form-control">
				</div>

				<div class="col-md-6">
					<label for="appVersion" class="form-label">App Version</label>
					<input type="text" id="appVersion" class="form-control">
				</div>

				<div class="col-md-6">
					<label for="lastApiCallDate" class="form-label">Last API Call Date</label>
					<input type="text" id="lastApiCallDate" class="form-control" readonly>
				</div>

				<!-- Row 4: Admin Fields -->
				<div class="col-md-6">
					<label for="appCode" class="form-label">App Code</label>
					<input type="text" id="appCode" class="form-control">
				</div>

				<div class="col-md-6">
					<label for="status" class="form-label">Status (Calculated)</label>
					<input type="text" id="status" class="form-control" readonly>
				</div>

				<div class="col-12">
					<label for="adminNotes" class="form-label">Admin Notes</label>
					<textarea id="adminNotes" class="form-control" rows="4"></textarea>
				</div>
			</div>

			<div class="btn_allsave_list mt-4">
				<button type="submit" class="btn btn-primary" id="saveBtn">Save Changes</button>
				<button type="button" id="deleteUserButton" class="btn-danger">Delete</button>
				<a href="/Home/Userprofile" class="btn-secondary">Back</a>
			</div>
			<!-- Generic Message Modal -->
			<div class="modal fade" id="messageModal" tabindex="-1" aria-labelledby="messageModalLabel" aria-hidden="true">
				<div class="modal-dialog modal-dialog-centered">
					<div class="modal-content">
						<div class="modal-header" id="messageModalHeader">
							<h5 class="modal-title" id="messageModalLabel">Message</h5>
							<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
						</div>
						<div class="modal-body text-center text-black fw-semibold" id="messageModalBody">
							<!-- Message will be inserted here by JavaScript -->
						</div>
						<div class="modal-footer">
							<button type="button" class="btn-secondary" data-bs-dismiss="modal">Close</button>
						</div>
					</div>
				</div>
			</div>
			<div class="btn_allsave_list mt-4">
			</div>
			<!-- DELETE CONFIRMATION MODAL -->
			<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
				<div class="modal-dialog modal-dialog-centered">
					<div class="modal-content">
						<div class="modal-header bg-danger text-white">
							<h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Deletion</h5>
							<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
						</div>
						<div class="modal-body">
							Are you sure you want to delete this user?
						</div>
						<div class="modal-footer">
							<button type="button" class="btn-secondary" data-bs-dismiss="modal">Cancel</button>
							<button type="button" id="confirmDeleteBtn" class="btn-danger">Yes, Delete User</button>
						</div>
					</div>
				</div>
			</div>
		</form>
	</div>
</div>

@section Scripts {
	<script>
		document.addEventListener('DOMContentLoaded', function () {

				const token = '@User.FindFirst("ApiToken")?.Value';
				const baseApiUrl = '@ViewBag.ApiUrl';
				const userDataString = sessionStorage.getItem('userToEdit');
				let originalUserData = null;
				const deleteConfirmModalElement = document.getElementById('deleteConfirmModal');
				const deleteConfirmModal = new bootstrap.Modal(deleteConfirmModalElement);
				const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
				const deleteButton = document.getElementById('deleteUserButton');

				const messageModalElement = document.getElementById('messageModal');
				const messageModal = new bootstrap.Modal(messageModalElement);
				const modalHeader = document.getElementById('messageModalHeader');
				const modalTitle = document.getElementById('messageModalLabel');
				const modalBody = document.getElementById('messageModalBody');
				let redirectOnClose = false;

				function showMessageModal(title, message, isError = false) {
						modalTitle.textContent = title;
						modalBody.textContent = message;

						if (isError) {
								modalHeader.classList.remove('bg-success');
								modalHeader.classList.add('bg-danger', 'text-white');
								redirectOnClose = false;
						} else {
								modalHeader.classList.remove('bg-danger', 'text-white');
								modalHeader.classList.add('bg-success', 'text-white');
								redirectOnClose = true;
						}
						messageModal.show();
				}

				messageModalElement.addEventListener('hidden.bs.modal', function () {
						if (redirectOnClose) {
								window.location.href = '@Url.Action("Userprofile", "Home")';
						}
				});


				if (userDataString) {
						originalUserData = JSON.parse(userDataString);
						console.log("Data loaded for editing:", originalUserData);
				} else {
						showMessageModal('Error', 'No user data found. Redirecting to dashboard.', true);
						redirectOnClose = true;
						return;
				}

				const formatDateForInput = (dateString) => {
						if (!dateString) return '';
						try { return new Date(dateString).toISOString().slice(0, 10); } catch { return ''; }
				};

				const formatDateForDisplay = (dateString) => {
						if (!dateString) return '-';
						try { return new Date(dateString).toLocaleDateString('en-GB'); } catch { return 'Invalid Date'; }
				};

				// --- POPULATE ALL FORM FIELDS ---
				document.getElementById('headerMobileNumber').textContent = originalUserData.mobileNumber || 'N/A';
				document.getElementById('userID').value = originalUserData.userID || '';
				document.getElementById('mobileNumber').value = originalUserData.mobileNumber || '';
				document.getElementById('createdDate').value = formatDateForDisplay(originalUserData.dateOfCreation);
				document.getElementById('emailID').value = originalUserData.emailID || '';
				document.getElementById('subscriptionExpiryDate').value = formatDateForInput(originalUserData.subscriptionExpiryDate);
				document.getElementById('deviceID').value = originalUserData.deviceID || '';
				document.getElementById('platform').value = originalUserData.platform || '';
				document.getElementById('appVersion').value = originalUserData.appVersion || '';
				document.getElementById('lastApiCallDate').value = formatDateForDisplay(originalUserData.lastAPICallDate);
				document.getElementById('appCode').value = originalUserData.appCode || '';
				document.getElementById('status').value = originalUserData.status || '';
				document.getElementById('adminNotes').value = originalUserData.adminNotes || '';

				// --- FORM SUBMISSION (UPDATE) LOGIC ---
				document.getElementById('editUserForm').addEventListener('submit', async function (event) {
						event.preventDefault();
						const saveButton = document.getElementById('saveBtn'); // Get button by ID
						saveButton.disabled = true;
						saveButton.textContent = 'Saving...';

						const originalExpiryDate = formatDateForInput(originalUserData.subscriptionExpiryDate);
						const newExpiryDate = document.getElementById('subscriptionExpiryDate').value;

						if (newExpiryDate !== originalExpiryDate) {
								if (!newExpiryDate) {
										showMessageModal('Validation Error', 'Subscription Expiry Date cannot be empty if you change it.', true);
										saveButton.disabled = false;
										saveButton.textContent = 'Save Changes';
										return;
								}
								const today = new Date();
								today.setHours(0, 0, 0, 0);
								const selectedDate = new Date(newExpiryDate);
								if (selectedDate <= today) {
										 showMessageModal('Validation Error', 'The new Subscription Expiry Date must be a future date.', true);
										saveButton.disabled = false;
										saveButton.textContent = 'Save Changes';
										return;
								}
						}

						const updatedData = {
								userID: parseInt(document.getElementById('userID').value, 10),
								emailID: document.getElementById('emailID').value,
								subscriptionExpiryDate: newExpiryDate,
								adminNotes: document.getElementById('adminNotes').value,
								appCode: document.getElementById('appCode').value,
								mobileNumber: originalUserData.mobileNumber,
								deviceID: originalUserData.deviceID,
								platform: document.getElementById('platform').value,
								appVersion: document.getElementById('appVersion').value,
								dateOfCreation: originalUserData.dateofCreation,
								lastAPICallDate: originalUserData.lastAPICallDate,
								status: originalUserData.status,
								subscriptionStatus: (originalUserData.subscriptionStatus === true || originalUserData.subscriptionStatus === 'true')
						};

						try {
								const response = await fetch(`${baseApiUrl}/api/Admin/UpdateUser/`, {
										method: 'PUT',
										headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
										body: JSON.stringify(updatedData)
								});

								if (!response.ok) {
										const errorText = await response.text();
										throw new Error(`API Error (${response.status}): ${errorText}`);
								}

								showMessageModal('Success', 'User details updated successfully!', false);

						} catch (error) {
								console.error('Failed to update user:', error);
								showMessageModal('Update Failed', `An error occurred while saving: ${error.message}`, true);
								saveButton.disabled = false;
								saveButton.textContent = 'Save Changes';
						}
				});


			deleteButton.addEventListener('click', function () {
						deleteConfirmModal.show();
			});

			confirmDeleteBtn.addEventListener('click', async function () {
				debugger
				deleteConfirmModal.hide();
				const userId = originalUserData.userID;
				if (!userId) {
						showMessageModal('Error', 'Cannot delete user: User ID is missing.', true);
						return;
				}

				deleteButton.disabled = true;
				deleteButton.textContent = 'Deleting...';

				try {
						const response = await fetch(`${baseApiUrl}/api/Admin/DeleteUsersRegisteredRecord?UserID=${userId}`, {
								method: 'DELETE',
								headers: {
										'Authorization': `Bearer ${token}`
								}
						});

						if (!response.ok) {
								const errorText = await response.text();
								throw new Error(`API Error (${response.status}): ${errorText || 'Failed to delete user.'}`);
						}
						showMessageModal('Success', 'User deleted successfully!', false);

				} catch (error) {
						console.error('Failed to delete user:', error);

						showMessageModal('Delete Failed', `An error occurred while deleting: ${error.message}`, true);

						deleteButton.disabled = false;
						deleteButton.textContent = 'Delete';
				}
			});
		});
	</script>
}