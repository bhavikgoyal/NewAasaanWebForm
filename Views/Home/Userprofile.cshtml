@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@section Styles {
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
	<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
	<link rel="stylesheet" href="~/css/site.css">
}

<style>

	header {
		width: 100%;
		background: #fff;
		display: flex;
		justify-content: space-between !important;
		padding: 8px 10px;
		position: fixed;
		z-index: 555;
	}

	.dropdown {
		position: relative;
		display: inline-block;
	}

	.dropdown-button {
		padding: 10px 20px;
		background-color: transparent;
		color: #000;
		border: none;
		cursor: pointer;
		font-size: 16px;
		border-radius: 5px;
	}

	.dropdown-menu {
		display: none;
		position: absolute;
		top: 100%;
		left: 0;
		background-color: white;
		box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
		min-width: 160px;
		z-index: 1;
		border-radius: 5px;
		overflow: hidden;
	}

		.dropdown-menu a {
			padding: 12px 16px;
			display: block;
			text-decoration: none;
			color: #333;
		}

			.dropdown-menu a:hover {
				background-color: #f1f1f1;
			}

	.dropdown:hover .dropdown-menu {
		display: block;
	}

	.header-actions .dropdown-menu {
		width: 90%;
		margin-left: 6%;
	}

	i.fa-solid.fa-lock {
		margin-right: 4px;
		margin-left: -2%;
	}

	button:focus:not(:focus-visible) {
		outline: 0;
		border-color: transparent !important;
		box-shadow: 0 0 0 .25rem rgba(0, 0, 0, .0) !important;
	}

	i.fa-solid.fa-arrow-right-from-bracket {
		margin-right: 4px;
		margin-left: -2%;
	}


	@@media only screen and (max-width: 1690px) {
		.dropdown {
			margin-right: 6rem;
		}
	}

	@@media only screen and (max-width: 991px) {
		div #headerContainer {
			left: 0% !important;
		}
	}

	@@media only screen and (max-width: 320px) {
		.dropdown-button {
			font-size: 13px !important;
		}
	}

</style>


<div class="page-wrapper">
	<!-- Desktop Sidebar -->
	<aside id="sidebar" class="sidebar d-none d-lg-block">
		<div class="sidebar-header">
			<span class="brand-name">
				<img src="~/image/logo 3.png" />
			</span>
		</div>
		<ul class="sidebar-nav">
			<li class="nav-item">
				<a href="/Home/Homepage" class="nav-link">
					<i class="fa-solid fa-house"></i>
					<span>Home</span>
				</a>
			</li>
			<li class="nav-item">
				<a href="/Home/Userprofile" class="nav-link active">
					<i class="fa-solid fa-user"></i>
					<span>User Profile</span>
				</a>
			</li>
			<li class="nav-item">
				<a href="/Home/AppGroups" class="nav-link">
					<i class="fa-solid fa-user"></i>
					<span>App Groups</span>
				</a>
			</li>
		</ul>
	</aside>

	<!-- Main Content -->
	<div class="main-content">
		<header>
			<div>
				<div>
					<button class="main_button">
						<i class="fa-solid fa-bars"></i>
					</button>
					<button class="btn" type="button"
									data-bs-toggle="offcanvas"
									data-bs-target="#mobile-sidebar"
									aria-controls="mobile-sidebar">
						<i class="fa-solid fa-bars"></i>
					</button>
				</div>
			</div>

			<div id="headerContainer" style="position: relative; left: -16%;">
				<div class="header-actions">
					<div class="dropdown">
						<button class="dropdown-button">
							Welcome, <strong>@User.Identity.Name</strong> <i class="fa-solid fa-angle-down"></i>
						</button>
						<div class="dropdown-menu">
							<a href="#" id="changePasswordBtn"><i class="fa-solid fa-lock"></i> Change Password</a>

							<a href="/Home/Logout" style="padding: 12px 16px;
										display: block;
										text-decoration: none;
										color: #333;">
								<i class="fa-solid fa-arrow-right-from-bracket"></i>
								Logout
							</a>

						</div>
					</div>
				</div>
			</div>
		</header>

		<div class="container-fluid ps-md-5 pe-md-5">
			<div class="data-card">
				<div class="card-header">
					<h3 class="card-title mb-0">Manage Admin Users</h3>
				</div>

				<div class="card-filters">
					<div class="row g-3 align-items-center">
						<div class="col-md-6">
							<input type="text" class="form-control" id="searchInput" placeholder="Search by Mobile Number...">
						</div>
					</div>
				</div>

				<div class="table-responsive">
					<table class="table table-striped table-hover align-middle">
						<thead>
							<tr style="background-color: red;">
								<th>UserID</th>
								<th>Mobile Number</th>
								<th>Email ID</th>
								<th>Created Date</th>
								<th>Device ID</th>
								<th>Subscription Expiry Date</th>
								<th>Platform</th>
								<th>App Version</th>
								<th>Last Api Call Date</th>
								<th>Admin Notes</th>
								<th>App Code</th>
								<th>Status</th>
								<th>Action</th>
							</tr>
						</thead>
						<tbody id="userDataBody"></tbody>
					</table>
				</div>

				<div class="card-footer d-flex flex-wrap justify-content-between align-items-center">
					<small class="text-muted" id="showingInfoText">Showing 0 of 0 results found</small>
					@* <nav aria-label="Page navigation"> *@
					@*   <ul class="pagination custom-pagination pagination-sm mb-0" id="paginationContainer"></ul> *@
					@* </nav> *@
					<nav aria-label="Page navigation example">
						<ul class="pagination" id="paginationContainer">
							<li class="page-item active">
								<a class="page-link active" href="#" data-page="1">1</a>
							</li>
							<li class="page-item">
								<a class="page-link" href="#" data-page="2">2</a>
							</li>
							<li class="page-item">
								<a class="page-link" href="#" data-page="3">3</a>
							</li>
						</ul>
					</nav>
				</div>
			</div>
		</div>
	</div>

</div>
<div class="offcanvas offcanvas-start" tabindex="-1" id="mobile-sidebar" aria-labelledby="mobile-sidebar-label">
	<div class="offcanvas-header">
		<h5 class="offcanvas-title" id="mobile-sidebar-label">Menu</h5>
		<button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
	</div>
	<div class="offcanvas-body">
		<ul class="sidebar-nav">
			<li class="nav-item">
				<a href="/Home/Homepage" class="nav-link">
					<i class="fa-solid fa-house"></i>
					<span>Home</span>
				</a>
			</li>
			<li class="nav-item">
				<a href="/Home/Userprofile" class="nav-link active">
					<i class="fa-solid fa-user"></i>
					<span>User Profile</span>
				</a>
			</li>
			<li class="nav-item">
				<a href="/Home/AppGroups" class="nav-link ">
					<i class="fa-solid fa-user"></i>
					<span>App Groups</span>
				</a>
			</li>
		</ul>
	</div>
</div>

@section Scripts {
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
	<script src="~/js/dashboardScript.js"></script>
	<script>
		document.querySelectorAll('.main_button').forEach(button => {
				button.addEventListener('click', () => {
						const sidebar = document.getElementById('sidebar');
						const mainContent = document.querySelector('.main-content');
						sidebar.classList.toggle('hidden');
						mainContent.classList.toggle('full-width');
				});
		});

			 document.querySelectorAll('.main_button').forEach(button => {
			button.addEventListener('click', () => {
				const header = document.getElementById('headerContainer');
				const currentLeft = window.getComputedStyle(header).left;

				if (currentLeft === '0px') {
					header.style.left = '-15%';
				} else {
					header.style.left = '0%';
				}
			});
		});


		document.addEventListener('DOMContentLoaded', function () {
				const userDataBody = document.getElementById('userDataBody');
				const searchInput = document.getElementById('searchInput');
				const paginationContainer = document.getElementById('paginationContainer');
				const showingInfoText = document.getElementById('showingInfoText');
					const changeButton = document.getElementById('changePasswordBtn');

				const token = '@User.FindFirst("ApiToken")?.Value';
				const baseApiUrl = '@ViewBag.ApiUrl';

				let currentPageIndex = 1;
				const PageSize = 50;
				let currentUsersData = [];

				async function fetchAllUsers() {
						if (!token) {
								handleAuthFailure();
								return;
						}
						setLoadingState();
						debugger
						try {
								const response = await fetch(`${baseApiUrl}/api/Admin/GetAllUsersDetails?PageIndex=${currentPageIndex}&PageSize=${PageSize}`, {
										method: 'GET',
										headers: { 'Authorization': `Bearer ${token}` }
								});

								if (!response.ok) throw new Error(`API Error: ${response.statusText}`);

								const users = await response.json();
								debugger
								if (users && users.length > 0) {
										const totalRecords = users[0].totalRecords;
										const totalPages = Math.ceil(totalRecords / PageSize);

										renderTable(users);
										updateShowingInfo(totalRecords, users.length);
										renderPagination(currentPageIndex, totalPages);
								} else {
										renderTable([]);
										showingInfoText.textContent = 'No results found.';
										paginationContainer.innerHTML = '';
								}

						} catch (error) {
								handleFetchError(error);
						}
				}

				// --- FUNCTION 2: To get SEARCH results (with pagination) ---
				async function fetchSearchResults(page, mobileNumber) {
						if (!token) {
								handleAuthFailure();
								return;
						}
						setLoadingState();
						currentPageIndex = page;
						debugger
						const apiUrl = new URL(`${baseApiUrl}/api/Admin/SearchUsers`);
						apiUrl.searchParams.append('pageIndex', currentPageIndex);
						apiUrl.searchParams.append('pageSize', PageSize);
						apiUrl.searchParams.append('mobileNumber', mobileNumber);

						try {
								const response = await fetch(apiUrl, {
										method: 'GET',
										headers: { 'Authorization': `Bearer ${token}` }
								});

								if (!response.ok) throw new Error(`API Error: ${response.statusText}`);

									 const result = await response.json();
									renderTable(result);
									debugger
									const totalRecords = result[0].totalRecords || 0;
									const totalPages = Math.ceil(totalRecords / PageSize);
									renderPagination(page, totalPages);
									updateShowingInfo(totalRecords, result.length);

						} catch (error) {
								handleFetchError(error);
						}
				}

				function parseAndFormatDate(dateString) {
						if (!dateString || typeof dateString !== 'string') {
								return '-';
						}
						const parts = dateString.split('-');
						if (parts.length !== 3) {
								return 'Invalid Date';
						}
						const isoDateString = `${parts[2]}-${parts[1]}-${parts[0]}`;
						const date = new Date(isoDateString);

						if (isNaN(date.getTime())) {
								return 'Invalid Date';
						}

						return date.toLocaleDateString('en-GB');
				}

				// --- HELPER FUNCTIONS ---
				function renderTable(users) {
						currentUsersData = users;
						userDataBody.innerHTML = '';
						if (!users || users.length === 0) {
								userDataBody.innerHTML = '<tr><td colspan="13" class="text-center">No users found.</td></tr>';
								return;
						}
						debugger
						users.forEach(user => {
								const row = document.createElement('tr');

								row.innerHTML = `
										<td>${user.userID || '-'}</td>
										<td>${user.mobileNumber || '-'}</td>
										<td>${user.emailID || '-'}</td>
								<td>${parseAndFormatDate(user.dateofCreation)}</td>
										<td>${user.deviceID || '-'}</td>
								<td>${parseAndFormatDate(user.subscriptionExpiryDate)}</td>
										<td>${user.platform || '-'}</td>
										<td>${user.appVersion || '-'}</td>
								<td>${parseAndFormatDate(user.lastAPICallDate)}</td>
										<td>${user.adminNotes || '-'}</td>
										<td>${user.appCode || '-'}</td>
								<td>${user.subscriptionStatus || '-'}</td>
										<td>
								 <button class="btn btn-outline-secondary btn-sm edit-btn"
												data-userid="${user.userID}"
												data-platform="${user.platform}">
										<i class="fas fa-pencil-alt me-1"></i>
								</button>
										</td>
								`;
								userDataBody.appendChild(row);
						});
				}

						function renderPagination(currentPageIndex, totalPages) {
				debugger;
				paginationContainer.innerHTML = '';
				if (totalPages <= 1) return;

				// Page Numbers with ellipsis
				let pagesHtml = '';
				for (let i = 1; i <= totalPages; i++) {
						if (
								i === currentPageIndex ||
								i <= 2 ||
								i >= totalPages - 1 ||
								(i >= currentPageIndex - 1 && i <= currentPageIndex + 1)
						) {
								pagesHtml += `
										<li class="page-item ${i === currentPageIndex ? 'active' : ''}">
												<a class="page-link" href="#" data-page="${i}">${i}</a>
										</li>`;
						} else if (!pagesHtml.includes('...')) {
								pagesHtml += `
										<li class="page-item disabled">
												<span class="page-link">...</span>
										</li>`;
						}
				}

				paginationContainer.innerHTML += pagesHtml;
		}


				function updateShowingInfo(totalRecords, currentBatchSize) {
						if (totalRecords === 0) {
								showingInfoText.textContent = 'No results found';
								return;
						}
						const startRecord = (currentPageIndex - 1) * PageSize + 1;
						const endRecord = startRecord + currentBatchSize - 1;
						showingInfoText.textContent = `Showing ${startRecord} to ${endRecord} of ${totalRecords} results found`;
				}

				function setLoadingState() {
						userDataBody.innerHTML = `<tr><td colspan="13" class="text-center"><div class="spinner-border spinner-border-sm" role="status"></div> Loading...</td></tr>`;
				}

				function handleAuthFailure() {
						userDataBody.innerHTML = `<tr><td colspan="13" class="text-center text-danger">Authorization failed. Please log in again.</td></tr>`;
				}

				function handleFetchError(error) {
						console.error('Fetch error:', error);
						userDataBody.innerHTML = `<tr><td colspan="13" class="text-center text-danger">Failed to load data: ${error.message}</td></tr>`;
				}

				// --- EVENT LISTENERS ---
				searchInput.addEventListener('blur', function () {
					debugger
						const mobileNumber = this.value.trim();
						if (mobileNumber.length > 0) {
								fetchSearchResults(1, mobileNumber);
						} else {
								currentPageIndex = 1;
								fetchAllUsers();
						}
				});




				paginationContainer.addEventListener('click', (event) => {
						event.preventDefault();
						const pageLink = event.target.closest('a.page-link');
						if (pageLink && pageLink.dataset.page) {
								const page = parseInt(pageLink.dataset.page, 10);
								const searchTerm = searchInput.value.trim();
								debugger
								if (page > 0) {
										if (searchTerm) {
												fetchSearchResults(page, searchTerm);
										} else {
												currentPageIndex = page;
												fetchAllUsers();
										}
								}
						}
				});

				userDataBody.addEventListener('click', function (event) {
						const editButton = event.target.closest('.edit-btn');
						if (!editButton) return;
						debugger
						const userIdToEdit = editButton.dataset.userid;
						const platformToEdit = editButton.dataset.platform;

						const userToEdit = currentUsersData.find(user =>
								user.userID == userIdToEdit && user.platform === platformToEdit
						);

						if (userToEdit) {
								sessionStorage.setItem('userToEdit', JSON.stringify(userToEdit));
								window.location.href = '/Home/EditUserDetails';
						} else {
								console.error('User not found in current data array with UserID:', userIdToEdit, 'and Platform:', platformToEdit);
								alert('Could not find user data to edit. Please refresh and try again.');
						}
				});

				changeButton.addEventListener('click', function (event) {
					debugger
						window.location.href = '/Home/CheckPassword';
				});

				// --- INITIAL DATA LOAD ---
				fetchAllUsers();
		});

	</script>
}