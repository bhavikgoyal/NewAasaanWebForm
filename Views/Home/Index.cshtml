@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@section Styles {
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="~/css/site.css">
}

<div class="page-wrapper">
  <!-- Desktop Sidebar -->
  <aside id="sidebar" class="sidebar d-none d-lg-block">
    <div class="sidebar-header">
      <span class="brand-name">
				<img src="~/image/logo 3.png" />
      </span>
    </div>
    <ul class="sidebar-nav">
      <li class="nav-item">
        <a href="/Home/Homepage" class="nav-link">
          <i class="fa-solid fa-house"></i>
          <span>Home</span>
        </a>
      </li>
      <li class="nav-item">
        <a href="/Home/Userprofile" class="nav-link">
          <i class="fa-solid fa-user"></i>
          <span>User Profile</span>
        </a>
      </li>
    </ul>
  </aside>

  <!-- Main Content -->
  <div class="main-content">
    <header>
      <div>
        <div>
          <button class="main_button">
            <i class="fa-solid fa-bars"></i>
          </button>
          <button class="btn" type="button"
                  data-bs-toggle="offcanvas"
                  data-bs-target="#mobile-sidebar"
                  aria-controls="mobile-sidebar">
            <i class="fa-solid fa-bars"></i>
          </button>
        </div>
      </div>

      <div id="headerContainer" style="position: relative; left: -15%;">
        <div class="header-actions">
          <p class="mb-0 me-3 d-none d-sm-block">Welcome, <strong>@User.Identity.Name</strong></p>
          <div class="dropdown">
            <form asp-action="Logout" asp-controller="Home" method="get">
              <button type="submit" class="btn btn-link text-decoration-none d-flex align-items-center gap-2" style="color: inherit;">
                <i class="fa-solid fa-arrow-right-from-bracket"></i>
                <span class="d-sm-inline">Logout</span>
              </button>
            </form>
          </div>
        </div>
      </div>
    </header>

    <!-- ==================== MAIN CONTENT AREA (UNCOMMENTED) ==================== -->
  @*   <div class="container-fluid ps-md-5 pe-md-5">
      <div class="data-card">
        <div class="card-header">
          <h3 class="card-title mb-0">Manage Admin Users</h3>
        </div>

        <div class="card-filters">
          <div class="row g-3 align-items-center">
            <div class="col-md-6">
              <input type="text" class="form-control" id="searchInput" placeholder="Search by Mobile Number...">
            </div>
          </div>
        </div>

        <div class="table-responsive">
          <table class="table table-hover align-middle">
            <thead>
              <tr>
                <th>UserID</th>
                <th>Mobile Number</th>
                <th>Email ID</th>
                <th>Created Date</th>
                <th>Device ID</th>
                <th>Subscription Expiry Date</th>
                <th>Platform</th>
                <th>App Version</th>
                <th>Last Api Call Date</th>
                <th>Admin Notes</th>
                <th>App Code</th>
                <th>Status</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody id="userDataBody"></tbody>
          </table>
        </div>

        <div class="card-footer d-flex flex-wrap justify-content-between align-items-center">
          <small class="text-muted" id="showingInfoText">Showing 0 of 0 results found</small>
          <nav aria-label="Page navigation">
            <!-- Pagination controls will be injected here -->
            <ul class="pagination custom-pagination pagination-sm mb-0" id="paginationContainer"></ul>
          </nav>
        </div>
      </div>
    </div> *@
    <!-- ==================== END OF MAIN CONTENT AREA ==================== -->
  </div>
</div>

<!-- ✅ Mobile Sidebar (Offcanvas) -->
<div class="offcanvas offcanvas-start" tabindex="-1" id="mobile-sidebar" aria-labelledby="mobile-sidebar-label">
  <div class="offcanvas-header">
    <h5 class="offcanvas-title" id="mobile-sidebar-label">Menu</h5>
    <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
  </div>
  <div class="offcanvas-body">
    <ul class="sidebar-nav">
      <li class="nav-item">
        <a href="/Home/Homepage" class="nav-link">
          <i class="fa-solid fa-house"></i>
          <span>Home</span>
        </a>
      </li>
      <li class="nav-item">
        <a href="/Home/Userprofile" class="nav-link">
          <i class="fa-solid fa-user"></i>
          <span>User Profile</span>
        </a>
      </li>
    </ul>
  </div>
</div>

@section Scripts {
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="~/js/dashboardScript.js"></script>

  <script>
    // --- Sidebar Toggle Logic ---
    document.querySelectorAll('.main_button').forEach(button => {
        button.addEventListener('click', () => {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.querySelector('.main-content');
            sidebar.classList.toggle('hidden');
            mainContent.classList.toggle('full-width');
        });
    });

    document.querySelectorAll('.main_button').forEach(button => {
      button.addEventListener('click', () => {
        const header = document.getElementById('headerContainer');
        const currentLeft = window.getComputedStyle(header).left;

        if (currentLeft === '0px') {
          header.style.left = '-15%';
        } else {
          header.style.left = '0%';
        }
      });
    });

    // document.addEventListener('DOMContentLoaded', function () {
    //     // --- GLOBAL STATE & ELEMENTS ---
    //     const userDataBody = document.getElementById('userDataBody');
    //     const searchInput = document.getElementById('searchInput');
    //     const paginationContainer = document.getElementById('paginationContainer');
    //     const showingInfoText = document.getElementById('showingInfoText');

    //     const token = '@User.FindFirst("ApiToken")?.Value';
    //     const baseApiUrl = '@ViewBag.ApiUrl';

    //     let currentPageIndex = 1;
    //     const PageSize = 1;
    //     let currentUsersData = [];

    //     // --- FUNCTION 1: To get ALL users with pagination ---
    //     async function fetchAllUsers() {
    //         if (!token) {
    //             handleAuthFailure();
    //             return;
    //         }
    //         setLoadingState();

    //         try {
    //             // Correctly uses the state variables for pagination
    //             const response = await fetch(`${baseApiUrl}/api/Admin/GetAllUsersDetails?PageIndex=${currentPageIndex}&PageSize=${PageSize}`, {
    //                 method: 'GET',
    //                 headers: { 'Authorization': `Bearer ${token}` }
    //             });

    //             if (!response.ok) throw new Error(`API Error: ${response.statusText}`);

    //             const users = await response.json();

    //             if (users && users.length > 0) {
    //                 const totalRecords = users[0].totalRecords; // Get total count from the API response
    //                 const totalPages = Math.ceil(totalRecords / PageSize);

    //                 renderTable(users);
    //                 updateShowingInfo(totalRecords, users.length);
    //                 renderPagination(currentPageIndex, totalPages);
    //             } else {
    //                 renderTable([]); // Render empty table
    //                 showingInfoText.textContent = 'No results found.';
    //                 paginationContainer.innerHTML = ''; // Clear pagination
    //             }

    //         } catch (error) {
    //             handleFetchError(error);
    //         }
    //     }

    //     // --- FUNCTION 2: To get SEARCH results (with pagination) ---
    //     async function fetchSearchResults(page = 1, mobileNumber) {
    //         if (!token) {
    //             handleAuthFailure();
    //             return;
    //         }
    //         setLoadingState();
    //         currentPageIndex = page; // Update current page for search

    //         const apiUrl = new URL(`${baseApiUrl}/api/Admin/SearchUsers`);
    //         apiUrl.searchParams.append('pageIndex', page);
    //         apiUrl.searchParams.append('pageSize', PageSize); // Ensure pageSize is also sent for search
    //         apiUrl.searchParams.append('mobileNumber', mobileNumber);

    //         try {
    //             const response = await fetch(apiUrl, {
    //                 method: 'GET',
    //                 headers: { 'Authorization': `Bearer ${token}` }
    //             });

    //             if (!response.ok) throw new Error(`API Error: ${response.statusText}`);

    //             const result = await response.json();
    //             renderTable(result.items);
    //             renderPagination(result.pageIndex, result.totalPages);
    //             // Use totalCount from the search result for the info text
    //             updateShowingInfo(result.totalCount, result.items.length);
    //         } catch (error) {
    //             handleFetchError(error);
    //         }
    //     }

    //     // --- HELPER FUNCTIONS (for cleaner code) ---
    //     function renderTable(users) {
    //         currentUsersData = users;
    //         userDataBody.innerHTML = '';
    //         if (!users || users.length === 0) {
    //             // Corrected colspan to match the number of columns
    //             userDataBody.innerHTML = '<tr><td colspan="13" class="text-center">No users found.</td></tr>';
    //             return;
    //         }

    //         users.forEach(user => {
    //             const row = document.createElement('tr');
    //             // This rendering logic is the same for both API calls
    //             row.innerHTML = `
    //                 <td>${user.userID || '-'}</td>
    //                 <td>${user.mobileNumber || '-'}</td>
    //                 <td>${user.emailID || '-'}</td>
    //                 <td>${user.dateofCreation ? new Date(user.dateofCreation).toLocaleDateString('en-GB') : '-'}</td>
    //                 <td>${user.deviceID || '-'}</td>
    //                 <td>${user.subscriptionExpiryDate ? new Date(user.subscriptionExpiryDate).toLocaleDateString('en-GB') : '-'}</td>
    //                 <td>${user.platform || '-'}</td>
    //                 <td>${user.appVersion || '-'}</td>
    //                 <td>${user.lastAPICallDate ? new Date(user.lastAPICallDate).toLocaleDateString('en-GB') : '-'}</td>
    //                 <td>${user.adminNotes || '-'}</td>
    //                 <td>${user.appCode || '-'}</td>
    //                 <td>${user.status || user.subscriptionStatus || '-'}</td>
    //                 <td>
    //                     <button class="btn btn-outline-secondary btn-sm edit-btn" data-userid="${user.userID}">
    //                         <i class="fas fa-pencil-alt me-1"></i>Edit
    //                     </button>
    //                 </td>
    //             `;
    //             userDataBody.appendChild(row);
    //         });
    //     }

    //     // UNIFIED pagination renderer
    //     function renderPagination(currentPage, totalPages) {
    //         paginationContainer.innerHTML = '';
    //         if (totalPages <= 1) return;

    //         // Previous Button
    //         paginationContainer.innerHTML += `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}"><a class="page-link" href="#" data-page="${currentPage - 1}"><i class="fas fa-chevron-left"></i></a></li>`;

    //         let pagesHtml = '';
    //         for (let i = 1; i <= totalPages; i++) {
    //             // This logic creates "..." for large page counts
    //             if (i === currentPage || (i <= 2) || (i >= totalPages - 1) || (i >= currentPage - 1 && i <= currentPage + 1)) {
    //                 pagesHtml += `<li class="page-item ${i === currentPage ? 'active' : ''}"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
    //             } else if (pagesHtml.slice(-25) !== '<span>...</span></li>') {
    //                 pagesHtml += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
    //             }
    //         }
    //         paginationContainer.innerHTML += pagesHtml;

    //         // Next Button
    //         paginationContainer.innerHTML += `<li class="page-item ${currentPage === totalPages ? 'disabled' : ''}"><a class="page-link" href="#" data-page="${currentPage + 1}"><i class="fas fa-chevron-right"></i></a></li>`;
    //     }

    //     // UNIFIED info text updater
    //     function updateShowingInfo(totalRecords, currentBatchSize) {
    //         if(totalRecords === 0) {
    //              showingInfoText.textContent = 'No results found';
    //              return;
    //         }
    //         const startRecord = (currentPageIndex - 1) * PageSize + 1;
    //         const endRecord = startRecord + currentBatchSize - 1;
    //         showingInfoText.textContent = `Showing ${startRecord} to ${endRecord} of ${totalRecords} results found`;
    //     }

    //     function setLoadingState() {
    //         userDataBody.innerHTML = `<tr><td colspan="13" class="text-center"><div class="spinner-border spinner-border-sm" role="status"></div> Loading...</td></tr>`;
    //     }

    //     function handleAuthFailure() {
    //         userDataBody.innerHTML = `<tr><td colspan="13" class="text-center text-danger">Authorization failed. Please log in again.</td></tr>`;
    //     }

    //     function handleFetchError(error) {
    //         console.error('Fetch error:', error);
    //         userDataBody.innerHTML = `<tr><td colspan="13" class="text-center text-danger">Failed to load data: ${error.message}</td></tr>`;
    //     }

    //     // --- EVENT LISTENERS ---

    //     // Search input listener
    //     searchInput.addEventListener('blur', function () {
    //         const mobileNumber = this.value.trim();
    //         if (mobileNumber.length > 0) {
    //             fetchSearchResults(1, mobileNumber); // Always search from page 1
    //         } else {
    //             currentPageIndex = 1; // Reset to page 1
    //             fetchAllUsers(); // if input is empty, reload all users
    //         }
    //     });

    //     // SMART pagination click listener
    //     paginationContainer.addEventListener('click', (event) => {
    //         event.preventDefault();
    //         const pageLink = event.target.closest('a.page-link');
    //         if (pageLink && pageLink.dataset.page) {
    //             const page = parseInt(pageLink.dataset.page, 10);
    //             const searchTerm = searchInput.value.trim();

    //             if (page > 0) {
    //                 if (searchTerm) {
    //                     // If there is a search term, paginate the search results
    //                     fetchSearchResults(page, searchTerm);
    //                 } else {
    //                     // Otherwise, paginate all users
    //                     currentPageIndex = page;
    //                     fetchAllUsers();
    //                 }
    //             }
    //         }
    //     });

    //     // Edit button click listener (delegated to the table body)
    //     userDataBody.addEventListener('click', function (event) {
    //         const editButton = event.target.closest('.edit-btn');
    //         if (!editButton) return;

    //         const userIdToEdit = parseInt(editButton.dataset.userid, 10);
    //         const userToEdit = currentUsersData.find(user => user.userID === userIdToEdit);

    //         if (userToEdit) {
    //             sessionStorage.setItem('userToEdit', JSON.stringify(userToEdit));
    //             window.location.href = '/Home/EditUserDetails';
    //         } else {
    //             console.error('User not found in current data:', userIdToEdit);
    //             alert('Could not find user data to edit.');
    //         }
    //     });

    //     // --- INITIAL DATA LOAD ---
    //     fetchAllUsers();
    // });

  </script>
}