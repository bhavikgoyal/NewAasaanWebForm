@{
    ViewData["Title"] = "Admin Dashboard";
}

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/css/site.css">
}

<div class="page-wrapper">
    <!-- Sidebar -->
    <aside id="sidebar" class="sidebar">
        @* Sidebar content remains the same *@
        <div class="sidebar-header">
            <span class="brand-name">
                <img src="~/images/logo.png" alt="Logo">
            </span>
        </div>
        <ul class="sidebar-nav">
            <li class="nav-item">
                <a href="#" class="nav-link">
                    <i class="fa-solid fa-house"></i>
                    <span>Starter Pages</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="#" class="nav-link">
                    <i class="fa-solid fa-user"></i>
                    <span>User Profile</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="#" class="nav-link">
                    <i class="fa-solid fa-key"></i>
                    <span>Change Password</span>
                </a>
            </li>
            <li class="sidebar-heading">Elements</li>
            <li class="nav-item">
                <a asp-action="Index" asp-controller="Home" class="nav-link active">
                    <i class="fa-solid fa-user-gear"></i>
                    <span>Manage Admin Users</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="#" class="nav-link">
                    <i class="fa-solid fa-users"></i>
                    <span>Manage App Users</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="#" class="nav-link">
                    <i class="fa-solid fa-credit-card"></i>
                    <span>User Payment Report</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="#" class="nav-link">
                    <i class="fa-solid fa-chart-area"></i>
                    <span>Manage TP Rates</span>
                </a>
            </li>
        </ul>
    </aside>

    <!-- Main Content -->
    <div class="main-content">
        @* Header remains the same *@
        <header class="header">
            <button class="btn" id="sidebar-toggle">
                <i class="fa-solid fa-bars"></i>
            </button>
            <button class="btn d-lg-none" type="button" data-bs-toggle="offcanvas" data-bs-target="#mobile-sidebar" aria-controls="mobile-sidebar">
                <i class="fa-solid fa-bars"></i>
            </button>
            <div class="header-actions">
                <p class="mb-0 me-3 d-none d-sm-block">Welcome, <strong>@User.Identity.Name</strong></p>
                <button class="btn" id="fullscreen">
                    <i class="fa-solid fa-expand"></i>
                </button>
                <div class="dropdown">
                    <form asp-action="Logout" asp-controller="Home" method="get">
                        <button type="submit" class="btn btn-link text-decoration-none d-flex align-items-center gap-2" style="color: inherit;">
                            <i class="fa-solid fa-arrow-right-from-bracket"></i>
                            <span class="d-none d-sm-inline">Logout</span>
                        </button>
                    </form>
                </div>
            </div>
        </header>

        <div class="container-fluid ps-md-5 pe-md-5">
            <div class="data-card">
                @* All HTML for the card, table, and footer remains the same as the previous version *@
                <div class="card-header">
                    <h3 class="card-title mb-0">Manage Admin Users</h3>
                </div>

                <div class="card-filters">
                    <div class="row g-3 align-items-center">
                        <div class="col-md-6">
                            <input type="text" class="form-control" id="searchInput" placeholder="Search by Mobile Number...">
                        </div>
                        @* <div class="col-md-3">
                            <select class="form-select" id="isPaidFilter">
                                <option value="all" selected>All (Is Paid?)</option> 
                                <option value="Yes">Yes</option>
                                <option value="No">No</option>
                            </select>
                        </div> *@
                        @* <div class="col-md-3">
                            <button id="searchButton" class="btn btn-primary w-100">Search</button>
                        </div> *@
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead>
                            <tr>
                                <th>Email ID</th>
                                <th>Mobile Number</th>
                                <th>Device ID</th>
                                <th>Created Date</th>
                                <th>Is Paid?</th>
                                <th>Expiry Date</th>
                                <th>Status</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="userDataBody"></tbody>
                    </table>
                </div>

                <div class="card-footer d-flex flex-wrap justify-content-between align-items-center">
                    <small class="text-muted" id="showingInfoText">Showing 0 of 0 results found</small>
                    <nav aria-label="Page navigation">
                        <ul class="pagination custom-pagination pagination-sm mb-0"></ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Mobile Sidebar -->
<div class="offcanvas offcanvas-start" tabindex="-1" id="mobile-sidebar" aria-labelledby="mobile-sidebar-label"></div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/dashboardScript.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const userDataBody = document.getElementById('userDataBody');
            const searchInput = document.getElementById('searchInput');
            const paginationContainer = document.querySelector('.pagination');
            const showingInfoText = document.getElementById('showingInfoText');

            const token = '@User.FindFirst("ApiToken")?.Value';
            const baseApiUrl = 'https://localhost:7127';

            let ignoreNextBlur = false;

            // Prevent triggering blur search when clicking a button (like "Edit")
            document.addEventListener('mousedown', function (e) {
                const isClickOnButton = e.target.closest('button') || e.target.closest('a.btn');
                ignoreNextBlur = !!isClickOnButton;
            });

            // Trigger search when input loses focus (blur), if at least 1 character typed
            searchInput.addEventListener('blur', function () {
                if (ignoreNextBlur) {
                    ignoreNextBlur = false;
                    return;
                }
                const mobileNumber = this.value.trim();
                if (mobileNumber.length > 0) {
                    fetchSearchResults(1, mobileNumber);
                }
            });

            // Optional: allow Enter key to also trigger search
                    searchInput.addEventListener('blur', function () {
            if (ignoreNextBlur) {
                ignoreNextBlur = false;
                return;
            }

            const mobileNumber = this.value.trim();
            if (mobileNumber.length > 0) {
                fetchSearchResults(1, mobileNumber);
            } else {
                fetchAllUsers(); // if input is empty, reload all users
            }
        });


            // --- FUNCTION 1: To get ALL users (no pagination) ---
            async function fetchAllUsers() {
                if (!token) {
                    handleAuthFailure();
                    return;
                }
                setLoadingState();

                searchInput.value = '';
                paginationContainer.innerHTML = '';

                try {
                    const response = await fetch(`${baseApiUrl}/api/Admin/GetAllUsersDetails`, {
                        method: 'GET',
                        headers: { 'Authorization': `Bearer ${token}` }
                    });

                    if (!response.ok) throw new Error(`API Error: ${response.statusText}`);

                    const users = await response.json();
                    renderTable(users);
                    showingInfoText.textContent = `Showing ${users.length} of ${users.length} results found`;

                } catch (error) {
                    handleFetchError(error);
                }
            }

            // --- FUNCTION 2: To get SEARCH results (with pagination) ---
            async function fetchSearchResults(page = 1, mobileNumber) {
                if (!token) {
                    handleAuthFailure();
                    return;
                }
                setLoadingState();

                const apiUrl = new URL(`${baseApiUrl}/api/Admin/SearchUsers`);
                apiUrl.searchParams.append('pageIndex', page);
                apiUrl.searchParams.append('mobileNumber', mobileNumber);

                try {
                    const response = await fetch(apiUrl, {
                        method: 'GET',
                        headers: { 'Authorization': `Bearer ${token}` }
                    });

                    if (!response.ok) throw new Error(`API Error: ${response.statusText}`);

                    const result = await response.json();
                    renderTable(result.items);
                    renderPagination(result.pageIndex, result.totalPages);
                    showingInfoText.textContent = `Showing ${result.items.length} of ${result.totalCount} results found`;
                } catch (error) {
                    handleFetchError(error);
                }
            }

            // --- HELPER FUNCTIONS ---
            function renderTable(users) {
                userDataBody.innerHTML = '';
                if (!users || users.length === 0) {
                    userDataBody.innerHTML = '<tr><td colspan="8" class="text-center">No users found.</td></tr>';
                    return;
                }
                users.forEach(user => {
                    const isPaid = user.subscriptionStatus;
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${user.emailID || '-'}</td>
                        <td>${user.mobileNumber || '-'}</td>
                        <td>${user.deviceID || '-'}</td>
                        <td>${new Date(user.dateOfCreation).toLocaleDateString()}</td>
                        <td><span class="badge ${isPaid ? 'bg-success-light text-success' : 'bg-danger-light text-danger'}">${isPaid ? 'Yes' : 'No'}</span></td>
                        <td>${user.subscriptionExpiryDate ? new Date(user.subscriptionExpiryDate).toLocaleDateString() : '-'}</td>
                        <td><span class="status-dot status-green"></span> ${user.status || 'Active'}</td>
                        <td><button class="btn btn-outline-secondary btn-sm"><i class="fas fa-pencil-alt me-1"></i>Edit</button></td>
                    `;
                    userDataBody.appendChild(row);
                });
            }

            function renderPagination(currentPage, totalPages) {
                paginationContainer.innerHTML = '';
                if (totalPages <= 1) return;

                paginationContainer.innerHTML += `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}"><a class="page-link" href="#" data-page="${currentPage - 1}"><i class="fas fa-chevron-left"></i></a></li>`;
                let pagesHtml = '';
                for (let i = 1; i <= totalPages; i++) {
                    if (i === currentPage || (i <= 2) || (i >= totalPages - 1) || (i >= currentPage - 1 && i <= currentPage + 1)) {
                        pagesHtml += `<li class="page-item ${i === currentPage ? 'active' : ''}"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
                    } else if (pagesHtml.slice(-25) !== '<span>...</span></li>') {
                        pagesHtml += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                    }
                }
                paginationContainer.innerHTML += pagesHtml;
                paginationContainer.innerHTML += `<li class="page-item ${currentPage === totalPages ? 'disabled' : ''}"><a class="page-link" href="#" data-page="${currentPage + 1}"><i class="fas fa-chevron-right"></i></a></li>`;
            }

            function setLoadingState() {
                userDataBody.innerHTML = '<tr><td colspan="8" class="text-center">Loading...</td></tr>';
            }

            function handleAuthFailure() {
                userDataBody.innerHTML = `<tr><td colspan="8" class="text-center text-danger">Authorization failed. Please log in again.</td></tr>`;
            }

            function handleFetchError(error) {
                console.error('Fetch error:', error);
                userDataBody.innerHTML = `<tr><td colspan="8" class="text-center text-danger">Failed to load data: ${error.message}</td></tr>`;
            }

            // Pagination click
            paginationContainer.addEventListener('click', (event) => {
                event.preventDefault();
                const pageLink = event.target.closest('a.page-link');
                if (pageLink && pageLink.dataset.page) {
                    const page = parseInt(pageLink.dataset.page, 10);
                    if (page > 0) {
                        fetchSearchResults(page, searchInput.value.trim());
                    }
                }
            });

            // Initial load
            fetchAllUsers();
        });
    </script>
}
